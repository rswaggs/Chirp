Maybe helpful still:
https://codesjava.com/jpa-2-overview-pdf


Development plan:
1. Maven dependencies (DevTools, Lombok, Web, Rest Repositories, Thymeleaf, Security, JPA, MySQL)

2. Work on Model component (primary guide I'm following: https://spring.io/guides/gs/accessing-data-mysql/)
	- Using JPA annotations to create the data entities and Lombok to reduce the boilerplate
	- *** ManyToOne and OneToMany mappings still ***
	- Remember to change "spring.jpa.hibernate.ddl-auto" from "create" to "none", in the application.properties, after running the application once, as database structure objects will be created within the Java configuration files

3. Work on the View component
	- Work on view pages with barebones content
4. React
	- Start a react project and make a few file and components on what I imagine to 	work out well
5. Work on the controller
6. User REST APIs to pass data to the react components.
7. Work on ensuring data security and proper login checks.
8. Hopefully all of that wasn't too difficult. Now a few JUnit tests.
9. Maybe simple tests with something like Selenium.
10. Deploy JAR file on AWS with the help of more tutorials.


Pages:
index.html --> Landing page
login.htnl --> For entering your profile
signup.html --> For creating an account
main.html --> Feed of all audio uploads
upload.html --> Upload audio clip
profile.html --> Profile page to look at user details

Database: Chirp
CREATE TABLE Users (
    Username VARCHAR(50) NOT NULL,
    Email VARCHAR(50) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    PRIMARY KEY (Username),
    UNIQUE(Email),
    CHECK (LENGTH(Password) > 7)
);

// Save file on disk and maintain reference
CREATE TABLE AudioFiles (
    AudioID INT NOT NULL AUTO_INCREMENT,
    FilePath VARCHAR(70) NOT NULL,
    PRIMARY KEY (AudioID)
);

// Index for faster reading later
CREATE TABLE Favourites (
    PersonID VARCHAR(50),
    AudioID INT,
    CONSTRAINT Favourite PRIMARY KEY (PersonID, AudioID),
    FOREIGN KEY (PersonID) REFERENCES Users(Username),
    FOREIGN KEY (AudioID) REFERENCES AudioFiles(AudioID)
);
